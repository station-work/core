version: '3.6'
services:
  
  postgres:
    image: postgres:12
    restart: always
    volumes:
    - db_data:/var/lib/postgresql/data
    env_file: .env
    environment:
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
  
  hasura:
    image: hasura/graphql-engine:v2.0.0-alpha.5
    ports:
    - "8080:8080"
    depends_on:
    - "postgres"
    restart: always
    env_file: .env
    environment:
      - HASURA_GRAPHQL_DATABASE_URL=$HASURA_GRAPHQL_DATABASE_URL
      ## enable the console served by server
      - HASURA_GRAPHQL_ENABLE_CONSOLE=$HASURA_GRAPHQL_ENABLE_CONSOLE # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      - HASURA_GRAPHQL_DEV_MODE=$HASURA_GRAPHQL_DEV_MODE
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=$HASURA_GRAPHQL_ENABLED_LOG_TYPES
      ## uncomment next line to set an admin secret
      - HASURA_GRAPHQL_ADMIN_SECRET=$HASURA_GRAPHQL_ADMIN_SECRET

  zarya:
    build:
      context: ./zarya
      dockerfile: Dockerfile
      args:
        - HASURA_GRAPHQL_ADMIN_SECRET=$HASURA_GRAPHQL_ADMIN_SECRET
        - ENCRYPTION_KEY=$ENCRYPTION_KEY
        - HASURA_APP_URL=$HASURA_APP_URL
    ports:
    - "3000:3000"
    volumes:
    - ./zarya:/app
    - ./error.log:/usr/src/app/error.log
    env_file: .env
    environment:
      - HASURA_GRAPHQL_ADMIN_SECRET=$HASURA_GRAPHQL_ADMIN_SECRET
      - ENCRYPTION_KEY=$ENCRYPTION_KEY
      - HASURA_APP_URL=$HASURA_APP_URL
    depends_on:
      - 'hasura'

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
    ports:
      - "9200:9200"
      - "9300:9300"
    configs:
      - source: elastic_config
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
      # Force publishing on the 'elk' overlay.
      network.publish_host: _eth0_
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1

  logstash:
    image: docker.elastic.co/logstash/logstash:7.12.0
    ports:
      - "5044:5044"
      - "5000:5000"
      - "9600:9600"
    configs:
      - source: logstash_config
        target: /usr/share/logstash/config/logstash.yml
      - source: logstash_pipeline
        target: /usr/share/logstash/pipeline/logstash.conf
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1

  kibana:
    image: docker.elastic.co/kibana/kibana:7.12.0
    ports:
      - "5601:5601"
    configs:
      - source: kibana_config
        target: /usr/share/kibana/config/kibana.yml
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1

configs:

  elastic_config:
    file: ./devops/elasticsearch/config/elasticsearch.yml
  logstash_config:
    file: ./devops/logstash/config/logstash.yml
  logstash_pipeline:
    file: ./devops/logstash/pipeline/logstash.conf
  kibana_config:
    file: ./devops/kibana/config/kibana.yml

volumes:
  db_data:
    driver: local
  elasticsearch:

networks:
  elk:
    driver: bridge