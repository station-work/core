version: '3.6'

services:
  postgres:
    image: postgres:12
    restart: always
    volumes:
    - db_data:/var/lib/postgresql/data
    env_file: .env
    environment:
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
  
  hasura:
    image: hasura/graphql-engine:v2.0.0-alpha.5
    ports:
    - "7000:8080"
    depends_on:
    - "postgres"
    restart: always
    env_file: .env
    environment:
      - HASURA_GRAPHQL_DATABASE_URL=$HASURA_GRAPHQL_DATABASE_URL
      - HASURA_GRAPHQL_ENABLE_CONSOLE=$HASURA_GRAPHQL_ENABLE_CONSOLE # set to "false" to disable console
      - HASURA_GRAPHQL_DEV_MODE=$HASURA_GRAPHQL_DEV_MODE
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=$HASURA_GRAPHQL_ENABLED_LOG_TYPES
      - HASURA_GRAPHQL_ADMIN_SECRET=$HASURA_GRAPHQL_ADMIN_SECRET

  zarya:
    build:
      context: ./zarya
      dockerfile: Dockerfile.dev
      args:
        - HASURA_GRAPHQL_ADMIN_SECRET=$HASURA_GRAPHQL_ADMIN_SECRET
        - ENCRYPTION_KEY=$ENCRYPTION_KEY
        - HASURA_APP_URL=$HASURA_APP_URL
    ports:
      - "8000:3000"
    volumes:
      - ./zarya:/usr/src/app
      - ./error.log:/usr/src/app/error.log
    env_file: .env
    environment:
      - HASURA_GRAPHQL_ADMIN_SECRET=$HASURA_GRAPHQL_ADMIN_SECRET
      - ENCRYPTION_KEY=$ENCRYPTION_KEY
      - HASURA_APP_URL=$HASURA_APP_URL
    depends_on:
      - 'hasura'

  astronaut:
    ports:
      - "3000:3000"
    depends_on:
      - 'hasura'
    env_file: .env
    build:
      context: ./astronaut
      dockerfile: Dockerfile.dev
      args:
        - DISCORD_URL=$DISCORD_URL
        - BOT_NAME=$BOT_NAME
        - BOT_IMAGE_URL=$BOT_IMAGE_URL
    volumes:
      - ./astronaut:/opt/app          
      - ./astronaut:/app/node_modules
    restart: always
    environment:
      - BOT_NAME=$BOT_NAME
      - DISCORD_URL=$DISCORD_URL
      - BOT_IMAGE_URL=$BOT_IMAGE_URL

  owncloud:
     image: owncloud/server:10.7
     restart: always
     ports:
       - 9000:8080
     depends_on:
       - db
       - redis
     environment:
       - OWNCLOUD_DOMAIN=localhost:8080
       - OWNCLOUD_DB_TYPE=mysql
       - OWNCLOUD_DB_NAME=owncloud
       - OWNCLOUD_DB_USERNAME=owncloud
       - OWNCLOUD_DB_PASSWORD=owncloud
       - OWNCLOUD_DB_HOST=db
       - OWNCLOUD_ADMIN_USERNAME=admin
       - OWNCLOUD_ADMIN_PASSWORD=admin
       - OWNCLOUD_MYSQL_UTF8MB4=true
       - OWNCLOUD_REDIS_ENABLED=true
       - OWNCLOUD_REDIS_HOST=redis
     healthcheck:
       test: ["CMD", "/usr/bin/healthcheck"]
       interval: 30s
       timeout: 10s
       retries: 5
     volumes:
       - files:/mnt/data

  db:
     image: webhippie/mariadb:latest
     restart: always
     environment:
       - MARIADB_ROOT_PASSWORD=owncloud
       - MARIADB_USERNAME=owncloud
       - MARIADB_PASSWORD=owncloud
       - MARIADB_DATABASE=owncloud
       - MARIADB_MAX_ALLOWED_PACKET=128M
       - MARIADB_INNODB_LOG_FILE_SIZE=64M
     healthcheck:
       test: ["CMD", "/usr/bin/healthcheck"]
       interval: 30s
       timeout: 10s
       retries: 5
     volumes:
       - mysql:/var/lib/mysql
       - backup:/var/lib/backup

  redis:
     image: webhippie/redis:latest
     restart: always
     environment:
       - REDIS_DATABASES=1
     healthcheck:
       test: ["CMD", "/usr/bin/healthcheck"]
       interval: 30s
       timeout: 10s
       retries: 5
     volumes:
       - redis:/var/lib/redis

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
    ports:
      - "9200:9200"
      - "9300:9300"
    configs:
      - source: elastic_config
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
      # Force publishing on the 'elk' overlay.
      network.publish_host: _eth0_
    deploy:
      mode: replicated
      replicas: 1

  logstash:
    image: docker.elastic.co/logstash/logstash:7.12.0
    ports:
      - "5044:5044"
      - "5000:5000"
      - "9600:9600"
    configs:
      - source: logstash_config
        target: /usr/share/logstash/config/logstash.yml
      - source: logstash_pipeline
        target: /usr/share/logstash/pipeline/logstash.conf
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    deploy:
      mode: replicated
      replicas: 1

  kibana:
    image: docker.elastic.co/kibana/kibana:7.12.0
    ports:
      - "5601:5601"
    configs:
      - source: kibana_config
        target: /usr/share/kibana/config/kibana.yml
    deploy:
      mode: replicated
      replicas: 1

  metricbeat:
    build:
      context: ./devops/metricbeat
      dockerfile: Dockerfile
      args:
        - ELK_VERSION=7.12.0
    container_name: metricbeat-metricbeat-services
    command: -e
    environment:
      - "WAIT_FOR_HOSTS=elasticsearch:9200 kibana:5601"
      - "HOST_ELASTICSEARCH=elasticsearch:9200"
      - "HOST_KIBANA=kibana:5601"
    depends_on:
      - elasticsearch
    networks:
      - metricbeat
  
    # Specific container and configuration to monitor the HOST (filesystem, memory, processes,...)
  metricbeat-host:
    build:
      context: ./devops/metricbeat
      dockerfile: Dockerfile
      args:
        - ELK_VERSION=7.12.0
        - METRICBEAT_FILE=metricbeat-host.yml
    container_name: metricbeat-metricbeat-host
    command: -system.hostfs=/hostfs
    volumes:
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - "WAIT_FOR_HOSTS=elasticsearch:9222 kibana:5666"
      - "HOST_ELASTICSEARCH=elasticsearch:9222"
      - "HOST_KIBANA=kibana:5666"
    extra_hosts:
      - "elasticsearch:172.17.0.1" # The IP of docker0 interface to access host from container
      - "kibana:172.17.0.1" # The IP of docker0 interface to access host from container
    network_mode: host # Mandatory to monitor HOST filesystem, memory, processes,...


configs:
  elastic_config:
    file: ./devops/elasticsearch/config/elasticsearch.yml
  logstash_config:
    file: ./devops/logstash/config/logstash.yml
  logstash_pipeline:
    file: ./devops/logstash/pipeline/logstash.conf
  kibana_config:
    file: ./devops/kibana/config/kibana.yml
  filebeat_config:
    file: ./devops/filebeat/config/filebeat.yml

volumes:
  db_data:
    driver: local
  files:
    driver: local
  mysql:
    driver: local
  backup:
    driver: local
  redis:
    driver: local
  keycloak-data:
    driver: local
  elasticsearch:
    driver: local
  filebeat_data:
    driver: local

networks:
  metricbeat:
    external:
      name: metricbeat

