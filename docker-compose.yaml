version: '3.6'
services:
  
  postgres:
    image: postgres:12
    restart: always
    volumes:
    - db_data:/var/lib/postgresql/data
    env_file: .env
    environment:
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
  
  hasura:
    image: hasura/graphql-engine:v2.0.0-alpha.5
    ports:
    - "7000:8080"
    depends_on:
    - "postgres"
    restart: always
    env_file: .env
    environment:
      - HASURA_GRAPHQL_DATABASE_URL=$HASURA_GRAPHQL_DATABASE_URL
      ## enable the console served by server
      - HASURA_GRAPHQL_ENABLE_CONSOLE=$HASURA_GRAPHQL_ENABLE_CONSOLE # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      - HASURA_GRAPHQL_DEV_MODE=$HASURA_GRAPHQL_DEV_MODE
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=$HASURA_GRAPHQL_ENABLED_LOG_TYPES
      ## uncomment next line to set an admin secret
      - HASURA_GRAPHQL_ADMIN_SECRET=$HASURA_GRAPHQL_ADMIN_SECRET

  zarya:
    build:
      context: ./zarya
      dockerfile: Dockerfile
      args:
        - HASURA_GRAPHQL_ADMIN_SECRET=$HASURA_GRAPHQL_ADMIN_SECRET
        - ENCRYPTION_KEY=$ENCRYPTION_KEY
        - HASURA_APP_URL=$HASURA_APP_URL
    ports:
    - "8000:3000"
    volumes:
    - ./zarya:/app
    - ./error.log:/usr/src/app/error.log
    env_file: .env
    environment:
      - HASURA_GRAPHQL_ADMIN_SECRET=$HASURA_GRAPHQL_ADMIN_SECRET
      - ENCRYPTION_KEY=$ENCRYPTION_KEY
      - HASURA_APP_URL=$HASURA_APP_URL
    depends_on:
      - 'hasura'

  astronaut:
    ports:
    - "3000:3000"
    depends_on:
      - 'hasura'
    env_file: .env
    volumes:
      - ./astronaut:/usr/src/app/astronaut
      - /usr/src/app/astronaut/node_modules
    build:
      context: ./astronaut
      dockerfile: Dockerfile
      args:
        - DISCORD_URL=$DISCORD_URL
        - BOT_NAME=$BOT_NAME
        - BOT_IMAGE_URL=$BOT_IMAGE_URL
    environment:
      - BOT_NAME=$BOT_NAME
      - DISCORD_URL=$DISCORD_URL
      - BOT_IMAGE_URL=$BOT_IMAGE_URL
  owncloud:
    image: owncloud/server:10.7
    restart: always
    ports:
      - 9000:8080
    depends_on:
      - db
      - redis
    environment:
      - OWNCLOUD_DOMAIN=localhost:8080
      - OWNCLOUD_DB_TYPE=mysql
      - OWNCLOUD_DB_NAME=owncloud
      - OWNCLOUD_DB_USERNAME=owncloud
      - OWNCLOUD_DB_PASSWORD=owncloud
      - OWNCLOUD_DB_HOST=db
      - OWNCLOUD_ADMIN_USERNAME=admin
      - OWNCLOUD_ADMIN_PASSWORD=admin
      - OWNCLOUD_MYSQL_UTF8MB4=true
      - OWNCLOUD_REDIS_ENABLED=true
      - OWNCLOUD_REDIS_HOST=redis
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - files:/mnt/data

  db:
    image: webhippie/mariadb:latest
    restart: always
    environment:
      - MARIADB_ROOT_PASSWORD=owncloud
      - MARIADB_USERNAME=owncloud
      - MARIADB_PASSWORD=owncloud
      - MARIADB_DATABASE=owncloud
      - MARIADB_MAX_ALLOWED_PACKET=128M
      - MARIADB_INNODB_LOG_FILE_SIZE=64M
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - mysql:/var/lib/mysql
      - backup:/var/lib/backup

  redis:
    image: webhippie/redis:latest
    restart: always
    environment:
      - REDIS_DATABASES=1
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - redis:/var/lib/redis
volumes:
  db_data:
    driver: local
  files:
    driver: local
  mysql:
    driver: local
  backup:
    driver: local
  redis:
    driver: local